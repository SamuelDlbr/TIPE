import math as ma
import matplotlib.pyplot as plt

def Bezier(L,x):
    
    "retourne le polynôme de Bézier quadratique associé aux points de la"
    "liste L (de longueur 3) en x (pour x entre 0 et 1)"
    
    Polynome_de_bezier=[0,0]
    
    for j in range(3): 
        Polynome_Bernstein_en_x=2/(ma.factorial(j)*ma.factorial(2-j))*(x**j)*(1-x)**(2-j)
        Polynome_de_bezier[0]+=Polynome_Bernstein_en_x*L[j][0]
        Polynome_de_bezier[1]+=Polynome_Bernstein_en_x*L[j][1]
        
    return(Polynome_de_bezier)
    
def Raccordement_polynomes_de_Bezier(L,dx):
    
    "découpe une longue liste de points en petites liste de 3 points et"
    "rassemble les listes retournées ^par ListeBézier en une liste"
    
    Liste_des_positions=[]
    
    for i in range(int((len(L)-1)/2)):
        Liste_des_positions+=Bezier_sous_forme_de_liste(L[(i)*2:(i+1)*2+1],dx)
        
    return(Liste_des_positions)
    
def Bezier_sous_forme_de_liste(L,dx):
    
    "retourne une liste de points à intervalles réguliers appartenant au"
    "polynôme de Bézier quadratique associé à la liste L (de longueur 3)"
    
    Liste_des_positions=[]
    nombre_de_points=int(2/dx)
    
    for i in range(nombre_de_points):
        Liste_des_positions.append(Bezier(L,dx*i/2))
        
    return(Liste_des_positions)
    
def Calcul_du_mouvement_angulaire(angle_initial,vitesse_angulaire_initiale,Liste_points_courbe_Bezier,g,rayon,coef_friction,masse,vitesse):
    
    "résout l'équation du mouvement avec la méthode d'Euler"
    
    Vitesse_angulaire=[vitesse_angulaire_initiale]
    Angle=[angle_initial]
    Forces_d_inertie=Calcul_forces_inertie(Liste_points_courbe_Bezier,vitesse)
    Nombre_de_points_calcules=int(len(Forces_d_inertie))
    
    for i in range (1,Nombre_de_points_calcules):
        
        "le pas correspond à l'intervalle de temps entre les points de calcul"
        "de la méthode d'Euler. Il correspond au temps mit, à vitesse"
        "constante, pour relier deux points consécutifs de la liste"
        "des points de la suite de courbes de Bézier générées auparavant"
        
        pas=ma.sqrt((Liste_points_courbe_Bezier[i+1][0]-Liste_points_courbe_Bezier[i][0])**2+
        (Liste_points_courbe_Bezier[i+1][1]-Liste_points_courbe_Bezier[i][1])**2)/vitesse
        Angle_precedent=Angle[-1]
        Vitesse_angulaire_precedente=Vitesse_angulaire[-1]
        Vitesse_angulaire.append(Vitesse_angulaire_precedente+pas*(Forces_d_inertie[i]/rayon*ma.cos(Angle_precedent)
        -g/rayon*ma.sin(Angle_precedent)-coef_friction/masse*Vitesse_angulaire_precedente))
        Angle.append(Angle_precedent+Vitesse_angulaire_precedente*pas)
        
    return(Angle)

def Calcul_forces_inertie(Liste_points_courbe_Bezier,vitesse):
    
    "déterminer les forces d'inertie le long du parcours (à vitesse constante)"
    
    Forces_inertie=[]
    for i in range(len(Liste_points_courbe_Bezier)-2):
        
        P1,P2,P3=Liste_points_courbe_Bezier[i],Liste_points_courbe_Bezier[i+1],Liste_points_courbe_Bezier[i+2]
        rayon_de_courbure=Calcul_rayon_de_courbure(P1,P2,P3)
        
        if rayon_de_courbure==[0]:
            Forces_inertie.append(0)
            
            "si les points sont alignés (en ligne droite) la force d'inertie est nulle"
            
        else :
            Forces_inertie.append(vitesse**2/rayon_de_courbure)
    return (Forces_inertie)
    
def Calcul_rayon_de_courbure(P1,P2,P3):
    
    "calcule le rayon du cercle passant par 3 points"
    
    x1,y1=P1[0],P1[1]
    x2,y2=P2[0],P2[1]
    x3,y3=P3[0],P3[1]
    
    "P1, P2 et P3 sont trois points consécutifs de la trajectoire"
    "determinant est le déterminant des vecteurs P1P2 et P1P3"
    
    determinant=(x2-x1)*(y3-y1)-(x3-x1)*(y2-y1)
    if determinant == 0 :
        
        "si le déterminant est nul, les points sont alignés et le rayon de"
        "courbure est infini. Pour éviter une erreur, on attribue à r une"
        "liste, on sait que si r est une liste les forces d'inerties seront"
        "nulles"
        
        rayon_de_courbure=[0]
    elif determinant>0:
        x0=((x3**2-x2**2)/(y3-y2)-(x1**2-x2**2)/(y1-y2)+y3-y1)/(2*((x3-x2)/(y3-y2))-2*((x1-x2)/(y1-y2)))
        y0=(-x0*((x3-x2)/(y3-y2))+((x3**2-x2**2)/(y3-y2)+y3+y2)/2)
        rayon_de_courbure=-ma.sqrt((y1-y0)**2+(x1-x0)**2)
        
        "x0 et y0 sont les coordonnées du centre du rayon de courbure"
        "si le déterminant est positif on a une base directe donc un virage à"
        "gauche. On oriente donc les forces d'inertie vers la gauche"
        
    elif determinant<0:
        x0=((x3**2-x2**2)/(y3-y2)-(x1**2-x2**2)/(y1-y2)+y3-y1)/(2*((x3-x2)/(y3-y2))-2*((x1-x2)/(y1-y2)))
        y0=(-x0*((x3-x2)/(y3-y2))+((x3**2-x2**2)/(y3-y2)+y3+y2)/2)
        rayon_de_courbure=ma.sqrt((y1-y0)**2+(x1-x0)**2)
        
        "si le déterminant est positif on a une base indirecte donc un virage à"
        "droite. On oriente donc les forces d'inertie vers la droite"
        
    return (rayon_de_courbure)

def Affichage_trajectoire(angle_initial,vitesse_angulaire_initiale,Liste_points_courbe_Bezier,g,rayon,coef_friction,masse,vitesse):
    
    "affiche la trajectoire de la masse vue de haut, son angle le long du"
    "parcours étant calculé par Calcul_du_mouvement_angulaire"
    
    Angle=Calcul_du_mouvement_angulaire(angle_initial,vitesse_angulaire_initiale,Liste_points_courbe_Bezier,g,rayon,coef_friction,masse,vitesse)
    
    "on veut un vecteur unitaire orthonormal à la courbe pour pouvoir afficher"
    "la trajectoire de la bille vue de haut. On calcule le vecteur"
    "orthonormal à deux points consécutifs de la courbe"
    
    deltax=[Liste_points_courbe_Bezier[i+1][0]-Liste_points_courbe_Bezier[i][0] for i in range(len(Liste_points_courbe_Bezier)-1)]
    deltay=[Liste_points_courbe_Bezier[i+1][1]-Liste_points_courbe_Bezier[i][1] for i in range(len(Liste_points_courbe_Bezier)-1)]
    norme=[ma.sqrt(deltax[i]**2+deltay[i]**2) for i in range(len(deltax))]
    
    "en mettant en commentaire les lignes 145, 206 et 207 on affiche le graphe"
    "de l'angle le long de la trajectoire"
    "en mettant en commentaire la lignes 146 on affiche la trajectoire vue de"
    "haut ainsi que les points pointés"
    
    plt.plot([Liste_points_courbe_Bezier[x][0]+rayon*ma.sin(-Angle[x])*deltay[x]/norme[x] for x in range(2,len(Liste_points_courbe_Bezier)-3)],[Liste_points_courbe_Bezier[x][1]+rayon*ma.sin(Angle[x])*deltax[x]/norme[x] for x in range(2,len(Liste_points_courbe_Bezier)-3)])
    "plt.plot(Angle)"
    
def Points_milieu(Liste):
    
    "ajoute à une liste les points au milieu des points présents afin de"
    "garantir des raccordements fluides aux courbes de Bézier"
    
    Liste_et_points_milieux=[]
    for i in range(len(Liste)-1):
        Liste_et_points_milieux.append([(Liste[i][0]+Liste[i+1][0])/2,(Liste[i][1]+Liste[i+1][1])/2])
        Liste_et_points_milieux.append([Liste[i+1][0],Liste[i+1][1]])
    return(Liste_et_points_milieux[:-1])
    
def Centre(Bord_Droit,Bord_Gauche):
    
    "retourne la liste représentant les points au centre du tube avec en"
    "entrée les listes des points des bords droits et gauche du tube"
    
    CENTRE=[[(Bord_Droit[i][0]+Bord_Gauche[i][0])/2,(Bord_Droit[i][1]+Bord_Gauche[i][1])/2] for i in range(len(Bord_Droit))]
    return(CENTRE)
    
def RAYON(Bord_Droit,Bord_Gauche):
    
    "calcule la distance moyenne entre les points de même indice de deux listes"
    "avec en entrée les listes des bords droit et gauche on obtient le rayon"
    "approximatif du tube"
    
    somme=0
    for i in range(len(Bord_Droit)):
        rayon=ma.sqrt((Bord_Droit[i][0]-Bord_Gauche[i][0])**2+(Bord_Droit[i][1]-Bord_Gauche[i][1])**2)/2
        somme+=rayon
    rayon_moyen=somme/len(Bord_Droit)
    return(rayon_moyen)
    
def PLOT(Positions):
    
    "PLOT représente sous forme de ligne une liste de points dans le plan"
    
    plt.plot([Positions[t][0] for t in range(len(Positions))],[Positions[t][1] for t in range(len(Positions))])

def SCATTER(L):
    
    "SCATTER représente sous forme de points une liste de points dans le plan"
    
    plt.scatter([L[t][0] for t in range(len(L))],[L[t][1] for t in range(len(L))])
    
def General(pas,angle_initial,vitesse_angulaire_initiale,Bord_Droit,g,Bord_Gauche,coef_friction,masse,vitesse):
    
    "la fonction générale regroupe les résultats et affiche les données"
    
    CENTRE=Centre(Bord_Droit,Bord_Gauche)
    
    "CENTRE est la liste des points au centre du tube"
    
    rayon=RAYON(Bord_Droit,Bord_Gauche)
    
    "r est le rayon approximatif du tube"
    
    "scatter affiche sous forme de points les bords du tube"
    
    SCATTER(Bord_Gauche)
    SCATTER(Bord_Droit)
    Points_centraux=Points_milieu(CENTRE)
    
    "pointsmilieu adapte la liste pour l'interpolation de Béziers"
    
    Liste_points_courbe_Bezier=Raccordement_polynomes_de_Bezier(Points_centraux,pas)
    
    "Raccordement_polynomes_de_Bezier renvoie une suite de polynomes de"
    "Bézier et trajgrapheliste calcule et affiche la trajectoire sur cette courbe"
    
    Affichage_trajectoire(angle_initial,vitesse_angulaire_initiale,Liste_points_courbe_Bezier,g,rayon,coef_friction,masse,vitesse)

if __name__ == '__main__':
    
    angle_initial=0
    vitesse_angulaire_initiale=0
    g=9.81
    pas=0.01
    coef_friction=0.016
    
    "Bord_Droit et Bord_Gauche sont les listes des points des bords du tube pointés avec Tracker"
    "Trajectoire_Pointée est la liste des points de la trajectoire de la bilee dans le tube"

    Bord_Droit=[[-0.29674851910441,-0.2554088225985117],[-0.29479737081941376, -0.14991720526858474], [-0.2928462225344175, -0.04442558793865775], [-0.267460172283756, 0.057118613063988556], [-0.21850136108605153, 0.13962327637863867], [-0.1518629791780649, 0.19764853409443653], [-0.07978472935922219, 0.23300767551500087], [-0.006799834888570189, 0.24751398994395035], [0.0566652907380837, 0.24570070064033167], [0.11423722612797682, 0.23028774155957288], [0.1795156410582495, 0.1872221205986291], [0.2189546834119559, 0.13599669777140128], [0.2443407336626175, 0.0652784149302726], [0.24162079970718942, -0.02674601722837558], [0.21396813782700455, -0.10245084565445563], [0.1740757731473935, -0.16138274802206287], [0.11015732519483486, -0.2126081708492907], [0.04170565398322957, -0.2461540229662363], [-0.04941213352360926, -0.26292694902470914], [-0.14596978894130416, -0.24434073366261766], [-0.22212793969328884, -0.19583524479081793]]
    Bord_Gauche=[[-0.2390652216543159,-0.25925437576185],[-0.239209704865991146, -0.15546656045749124], [-0.23935418807766634, -0.05167874515313248], [-0.21804803876014683, 0.03943904235370635], [-0.17634238477691716, 0.10743739123940703], [-0.12557028427559394, 0.15322294615577878], [-0.061651836323035385, 0.18540883129501043], [-0.004533223259046863, 0.19628856711672257], [0.054398679108560305, 0.19900850107215057], [0.09973091169902744, 0.18540883129501043], [0.1505030122003506, 0.15140965685216012], [0.18268889733958227, 0.11015732519483504], [0.19810185642034106, 0.05666529073808388], [0.1931153108353896, -0.018132893036186815], [0.17044919454015606, -0.07933140703331741], [0.13826330940092454, -0.12602360660149853], [0.08477127494417332, -0.1754357401251077], [0.02583937257656608, -0.20172843502757862], [-0.05258538980494201, -0.2171413941083374], [-0.1341834084677828, -0.2021817573534833], [-0.1949286001390086, -0.16274271499977683]]         
    Trajectoire_Pointée=[[-0.2917459387404979, -0.2772007851523816], [-0.2900692379431387, -0.2696556315642653], [-0.28923088754445914, -0.26127212757746937], [-0.2875541867470999, -0.25288862359067343], [-0.28671583634842035, -0.24450511960387755], [-0.2858774859497408, -0.2369599660157612], [-0.28420078515238156, -0.2294148124276449], [-0.28503913555106114, -0.221031308440849], [-0.2816857339563428, -0.21264780445405307], [-0.2816857339563428, -0.2059410012646163], [-0.283362434753702, -0.19923419807517959], [-0.2808473835576632, -0.1908506940883837], [-0.2758172811655857, -0.18246719010158777], [-0.27414058036822647, -0.17492203651347146], [-0.2707871787735081, -0.16150843013459798], [-0.2691104779761489, -0.1573166781412], [-0.26743377717878974, -0.1497715245530837], [-0.27414058036822647, -0.14138802056628774], [-0.27497893076690605, -0.13384286697817144], [-0.2733022299695469, -0.12629771339005513], [-0.2733022299695469, -0.11623750860589999], [-0.27414058036822647, -0.11288410701118165], [-0.2716255291721877, -0.10198555182834694], [-0.2716255291721877, -0.09947050063230817], [-0.2712063539728479, -0.09150617184485205], [-0.2691104779761489, -0.08354184305739593], [-0.2691104779761489, -0.07641586466861937], [-0.2682721275774693, -0.06803236068182349], [-0.26617625158077035, -0.06006803189436737], [-0.2653379011820908, -0.05378040390427045], [-0.262822849986052, -0.04665442551549389], [-0.26324202518539175, -0.03994762232605715], [-0.2636612003847316, -0.03198329353860103], [-0.26324202518539175, -0.02485731514982454], [-0.26240367478671217, -0.01898886235906736], [-0.2619844995873724, -0.009347832774252069], [-0.2636612003847316, -0.001383503986795944], [-0.26240367478671217, 0.004904124003301014], [-0.2619844995873724, 0.012449277591417321], [-0.26240367478671217, 0.017898555182834678], [-0.260726973989353, 0.025862883970290802], [-0.260726973989353, 0.032569687159727544], [-0.2603077987900132, 0.03843813995048468], [-0.2598886235906734, 0.043887417541902], [-0.25695439719529484, 0.049755870332659144], [-0.2552776963979356, 0.055624323123416315], [-0.2544393459992561, 0.060654425515493854], [-0.2527626452018969, 0.06694205350559078], [-0.2515051196038775, 0.07197215589766835], [-0.24899006840783872, 0.0770022582897459], [-0.24731336761047953, 0.08077483508380405], [-0.24437914121510096, 0.0862241126752214], [-0.24354079081642138, 0.08915833907059999], [-0.2406065644210428, 0.09460761666201731], [-0.23725316282632444, 0.10089524465211427], [-0.23599563722830508, 0.10299112064881326], [-0.23389976123160608, 0.1059253470441918], [-0.2309655348362275, 0.11053627423692956], [-0.2288696588395285, 0.11305132543296834], [-0.22509708204547035, 0.11682390222702652], [-0.2225820308494316, 0.12059647902108467], [-0.2200669796533928, 0.12478823101448265], [-0.21713275325801423, 0.1273032822105214], [-0.21377935166329587, 0.13107585900457958], [-0.21084512526791727, 0.13442926059929794], [-0.2083300740718785, 0.1373634869946765], [-0.20371914687914078, 0.1402977133900551], [-0.20204244608178157, 0.14365111498477345], [-0.19617399329102447, 0.1474236917788316], [-0.19365894209498563, 0.14951956777553058], [-0.1890480149022479, 0.15287296937024897], [-0.18485626290884993, 0.15538802056628773], [-0.18108368611479178, 0.1587414221610061], [-0.17773028452007344, 0.16125647335704488], [-0.17144265652997645, 0.16502905015110303], [-0.16808925493525811, 0.167124926147802], [-0.16096327654648157, 0.17047832774252036], [-0.1567715245530836, 0.17173585334053976], [-0.15341812295836527, 0.17467007973591836], [-0.1479688453669479, 0.1776043061312969], [-0.14335791817421017, 0.18011935732733567], [-0.13790864058279284, 0.18305358372271427], [-0.1328785381907153, 0.18598781011809284], [-0.12742926059929793, 0.18934121171281118], [-0.1223991582072204, 0.19185626290884994], [-0.11653070541646322, 0.19353296370620915], [-0.11108142782504586, 0.19562883970290815], [-0.10563215023362851, 0.1989822412976265], [-0.10102122304089078, 0.20107811729432545], [-0.096410295848153, 0.20317399329102448], [-0.08802679186135713, 0.20568904448706324], [-0.08425421506729897, 0.2077849204837622], [-0.07796658707720198, 0.2098807964804612], [-0.07209813428644488, 0.21197667247716018], [-0.06539133109700813, 0.21449172367319894], [-0.060361228704930596, 0.21533007407187854], [-0.05533112631285299, 0.2170067748692377], [-0.04904349832275606, 0.2199410012646163], [-0.04359422073133871, 0.2216177020619755], [-0.037725767940581606, 0.22287522765999487], [-0.03227649034916425, 0.22371357805867445], [-0.025988862359067326, 0.22580945405537345], [-0.02053958476764997, 0.22706697965339281], [-0.014671131976892795, 0.2283245052514122], [-0.009641029584815258, 0.228743680450752], [-0.0037725767940581536, 0.2295820308494316], [0.0012575255980194556, 0.23000120604877142], [0.007125978388776559, 0.23125873164679078], [0.0138327815782133, 0.23293543244414996], [0.019282059169630657, 0.23293543244414996], [0.02263546076434899, 0.23251625724481018], [0.02976143915312555, 0.23377378284282957], [0.03395319114652352, 0.23251625724481018], [0.03940246873794088, 0.23335460764348978], [0.044851746329358164, 0.23251625724481018], [0.04988184872143577, 0.2320970820454704], [0.05491195111351331, 0.23042038124811118], [0.061199579103610235, 0.2295820308494316], [0.06664885669502758, 0.2295820308494316], [0.07084060868842557, 0.2291628556500918], [0.07503236068182353, 0.2274861548527326], [0.08048163827324081, 0.22539027885603366], [0.0846733902666388, 0.22497110365669384], [0.09054184305739596, 0.22245605246065506], [0.09515277025013369, 0.22036017646395611], [0.09976369744287147, 0.2182643004672571], [0.10479379983494894, 0.21742595006857754], [0.10856637662900724, 0.21616842447055815], [0.11317730382174489, 0.21281502287583978], [0.11820740621382242, 0.2111383220784806], [0.12323750860589996, 0.2094616212811214], [0.12742926059929802, 0.20652739488574282], [0.1320401877920358, 0.20485069408838363], [0.13707029018411332, 0.20149729249366527], [0.1408428669781715, 0.1968863653009275], [0.14629214456958878, 0.19520966450356836], [0.1513222469616663, 0.1914370877095102], [0.15341812295836532, 0.1885028613141316], [0.15886740054978263, 0.18431110932073363], [0.16389750294186028, 0.18011935732733567], [0.1680892549352582, 0.17676595573261733], [0.1722810069286561, 0.17215502853987955], [0.17647275892205413, 0.1679632765464816], [0.18108368611479178, 0.16377152455308366], [0.18401791251017044, 0.1591605973603459], [0.18862883970290822, 0.15496884536694794], [0.19282059169630614, 0.1499387429748704], [0.19575481809168466, 0.146585341380152], [0.20078492048376234, 0.14155523898807446], [0.20623419807517962, 0.13526761099797754], [0.21042595006857753, 0.1293991582072204], [0.2116834756665969, 0.12436905581514283], [0.21461770206197556, 0.11933895342306529], [0.21545605246065505, 0.1172430774263663], [0.21797110365669384, 0.11263215023362855], [0.2209053300520725, 0.10676369744287141], [0.2230012060487715, 0.10089524465211427], [0.22509708204547038, 0.0967034926587163], [0.2271929580421694, 0.09251174066531836], [0.22928883403886843, 0.08748163827324079], [0.22970800923820817, 0.08370906147918264], [0.23096553483622756, 0.07742143348908567], [0.2318038852349072, 0.07281050629634793], [0.23348058603226632, 0.0673612287049306], [0.23389976123160608, 0.06275030151219284], [0.2347381116302857, 0.05730102392077548], [0.23431893643094598, 0.049755870332659144], [0.23515728682962547, 0.04514494313992139], [0.2359956372283051, 0.04095319114652345], [0.2359956372283051, 0.035923088754445914], [0.23641481242764484, 0.032569687159727544], [0.23683398762698474, 0.026701234368970404], [0.23683398762698474, 0.02167113197689283], [0.23641481242764484, 0.016221854385475475], [0.2359956372283051, 0.010772576794058153], [0.2347381116302857, 0.004065773604621413], [0.23389976123160608, -0.0009643287874561259], [0.23306141083292659, -0.006413606378873481], [0.23306141083292659, -0.011862883970290804], [0.2318038852349072, -0.01773133676104798], [0.23054635963688783, -0.022761439153125517], [0.2284504836401888, -0.02904906714322244], [0.22593543244415001, -0.03491751993397961], [0.2242587316467909, -0.03994762232605715], [0.22216285565009186, -0.04497772471813469], [0.22048615485273274, -0.052103703106911245], [0.2183902788560337, -0.05797215589766835], [0.21461770206197556, -0.06384060868842552], [0.21126430046725717, -0.07096658707720208], [0.20916842447055814, -0.07683503986795918], [0.2053958476765, -0.08228431745937653], [0.2041383220784806, -0.08731441985145408], [0.20036574528442244, -0.09192534704419186], [0.19868904448706332, -0.09569792383825002], [0.1953356428923449, -0.10491977822372553], [0.1932397668956459, -0.10994988061580308], [0.18988636530092762, -0.1149799830078806], [0.18695213890554896, -0.12001008539995814], [0.1835987373108307, -0.12587853819071532], [0.17982616051677242, -0.13048946538345305], [0.17856863491875302, -0.13635791817421022], [0.17395770772601538, -0.14138802056628774], [0.16892760533393783, -0.1464181229583653], [0.16557420373921944, -0.15186740054978265], [0.16222080214450102, -0.1573166781412], [0.15760987495176323, -0.16276595573261735], [0.15341812295836532, -0.16737688292535507], [0.15090307176232656, -0.17114945971941323], [0.14671131976892865, -0.17492203651347146], [0.14251956777553063, -0.17869461330752962], [0.1391661661808122, -0.18288636530092758], [0.13497441418741432, -0.18623976689564592], [0.12994431179533678, -0.19168904448706328], [0.12617173500127862, -0.19462327088244186], [0.12281833340656022, -0.19713832207848062], [0.11904575661250207, -0.20007254847385922], [0.11359647902108477, -0.20300677486923774], [0.10856637662900724, -0.20636017646395613], [0.10437462463560919, -0.20887522765999492], [0.09934452224353166, -0.2118094540553735], [0.09515277025013369, -0.214743680450752], [0.08928431745937658, -0.21725873164679077], [0.08593091586465817, -0.2206121332415092], [0.08006246307390107, -0.22186965883952858], [0.07545153588116328, -0.22564223563358674], [0.06874473269172654, -0.22648058603226628], [0.06371463029964901, -0.23067233802566425], [0.05742700230955208, -0.23276821402236328], [0.05072019912011534, -0.2344449148197224], [0.04527092152869798, -0.2357024404177418], [0.040659994335960264, -0.2369599660157612], [0.03353401594718371, -0.23779831641444082], [0.028923088754445984, -0.24115171800915916], [0.02095875996698986, -0.2419900684078388], [0.015090307176232685, -0.24408594440453774], [0.008383503986795944, -0.24534347000255713], [0.0029342263953785874, -0.24702017079991634], [-0.0037725767940581536, -0.24785852119859592], [-0.009641029584815258, -0.24911604679661525], [-0.01592865757491218, -0.24995439719529494], [-0.023473811163028557, -0.2512119227933143], [-0.030180614352465298, -0.25288862359067343], [-0.03646824234256222, -0.25330779879001325], [-0.041917519933979575, -0.25372697398935307], [-0.047366797525396936, -0.25456532438803264], [-0.05323525031615404, -0.25498449958737246], [-0.05994205350559078, -0.25456532438803264], [-0.06706803189436733, -0.2554036747867122], [-0.07251730948578462, -0.25456532438803264], [-0.07754741187786224, -0.25456532438803264], [-0.08341586466861933, -0.25372697398935307], [-0.0876076166620173, -0.2524694483913337], [-0.09389524465211423, -0.25163109799265404], [-0.09850617184485203, -0.2524694483913337], [-0.10395544943626937, -0.25037357239463465], [-0.10898555182834692, -0.24911604679661525], [-0.11443482941976427, -0.24785852119859592], [-0.119045756612502, -0.24743934599925616], [-0.1253333846025989, -0.24450511960387755], [-0.1299443117953367, -0.24282841880651837], [-0.13413606378873466, -0.2419900684078388], [-0.13958534138015197, -0.23863666681312037], [-0.14419626857288975, -0.2357024404177418], [-0.1479688453669479, -0.23528326521840204], [-0.15425647335704482, -0.23318738922170304], [-0.15760987495176323, -0.23109151322500407], [-0.16347832774252033, -0.2285764620289653], [-0.16850843013459793, -0.2252230604342469], [-0.17311935732733566, -0.221031308440849], [-0.17856863491875302, -0.2193546076434898], [-0.182760386912151, -0.21558203084943164], [-0.18737131410488872, -0.2118094540553735], [-0.1903055405002673, -0.20803687726131526], [-0.19575481809168466, -0.20468347566659695], [-0.2007849204837622, -0.20049172367319895], [-0.20497667247716017, -0.19629997167980098], [-0.20874924927121832, -0.19252739488574283], [-0.21336017646395602, -0.18707811729432547], [-0.21713275325801423, -0.18372471569960713], [-0.22090533005207239, -0.17995213890554898], [-0.22551625724481014, -0.17408368611479183], [-0.22845048364018872, -0.17031110932073368]]

    PLOT(Trajectoire_Pointée)
    
    "la double boucle lance le progamme plusieurs  fois pour différentes"
    "masses de passagers et coefficients de friction"

    for masse in range(1,5):
        for vitesse in range(5,10):
            General(pas,angle_initial,vitesse_angulaire_initiale,Bord_Droit,g,Bord_Gauche,coef_friction,masse/1000,vitesse/5)